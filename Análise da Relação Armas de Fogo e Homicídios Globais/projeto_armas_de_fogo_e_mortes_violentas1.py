# -*- coding: utf-8 -*-
"""Projeto - Armas de fogo e Mortes Violentas1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qCkhUAtMaJXGDtkVFeJCCFSbYh-rP4G-

## **Armas de Fogo e Violência: Uma Análise Multifacetada da Relação entre Posse de Armas e Homicídios no Contexto Global** part1.

### O objetivo final dessa parte do projeto é o agrupamento de países a partir da semelhança de 3 características: tamanho da população, mortes (por 100k habitantes) e posse de armas (100 habitantes).

### Para tal, utilizou-se de uma modelagem de machine learning denominada clustering. A partir desse trabalho descobrimos a quantidade ideal de agrupamento para esse grupo de países, dado essas 3 características.

### Dessa forma, perceba que esse agrupamento ocorreu de maneira isenta a partir de uma modelagem de machine learning objetiva e sem viés, mas precisa e baseada em métodos estatísticos.

### **Veja um resumo dos agrupamentos e as características comuns a cada grupo:**

* #### Cluster 0: Países com taxas muito baixas de mortes violentas (variando de 0.15 a 0.63 por 100 mil), populações pequenas a médias e uma alta quantidade de armas de fogo por 100 habitantes (entre 300 e 347). Este grupo inclui países europeus e o Canadá, como Áustria, Finlândia e Chipre.

* #### Cluster 1: Países com variações moderadas nas taxas de mortes violentas (de 0.32 a 3.79 por 100 mil), populações médias e uma menor quantidade de armas de fogo civis (entre 21 e 125 por 100 habitantes). Países como Afeganistão, Albânia e Argentina pertencem a este cluster.

* #### Cluster 2: China e Índia se destacam aqui, representando países altamente populosos (mais de 1 bilhão de habitantes), com baixas taxas de mortes violentas (0.02 e 0.57 por 100 mil) e também uma quantidade muito baixa de armas de fogo civis (36 e 53 por 100 habitantes).

* #### Cluster 3: Países com taxas altas de mortes violentas (entre 6.29 e 11.84 por 100 mil), populações pequenas a médias e variação moderada no número de armas de fogo civis (26 a 196 por 100 habitantes). Inclui países da América Latina e Caribe, como Costa Rica e Haiti, além do Iraque.

* #### Cluster 4: Países com as maiores taxas de mortes violentas (variando de 20.15 a 36.78 por 100 mil), populações entre médias e grandes, e uma quantidade moderada de armas de fogo civis (83 a 141 por 100 habitantes). Este cluster inclui países latino-americanos como Brasil, Colômbia e El Salvador.

* #### Cluster 5: Os Estados Unidos aparecem isolados neste cluster, com uma taxa relativamente alta de mortes violentas (3.96 por 100 mil), uma população muito grande, e uma quantidade extraordinariamente alta de armas de fogo civis (1205 por 100 habitantes).

#### Note que o Brasil se encontra no grupo 4, junto com  Colômbia, El Salvador, Guatemala, Honduras e Vezenuela. Isso é mais que um sinal de que a coisa está muito ruim.

---

### Vamos ao trabalho:

#### Carrego algumas bibliotecas que vou utilizar sempre
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import datetime as dt
import gspread as gs

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score, mean_absolute_error

import plotly.express as px
import plotly.graph_objects as go

"""#### Vou carregar a base de dados extraída do ranking Global Peace Index (GPI):"""

url = "https://docs.google.com/spreadsheets/d/1N2WuobFrBv-S-ybZ54w3Jky3amdosK2dpBJnbd74AN4/export?format=csv"
dados_perigo = pd.read_csv(url)

dados_perigo.head()

#vou colocar ponto onde há vírgula no dados_perigo
dados_perigo = dados_perigo.replace(',','.', regex=True)

dados_perigo.head()

"""## Vou carregar os dados acerca da quantidade de armas por cidadão:"""

url1 = "https://docs.google.com/spreadsheets/d/16FRJ0IlLevIvBnaLV9fY8nZYZO-bR2On-yix7wC5nb8/export?format=csv"
posse_armas = pd.read_csv(url1)

posse_armas.head()

"""### Dados acerca das mortes totais e violentas por país"""

url3 = "https://docs.google.com/spreadsheets/d/1y_jvjhj-Ca92oUzlAPZV1FoCjYN6F11ch6ILaN4mSzw/export?format=csv"
mortes_armas= pd.read_csv(url3)

mortes_armas.head()

#vou trocar vírgula por ponto
mortes_armas = mortes_armas.replace(',','.', regex=True)

url3 = "https://docs.google.com/spreadsheets/d/1WIW5VzrnrVZlYnvPRGKwr0mv349jTJ7MGCS6VE6FbHo/export?format=csv"
dados_pop = pd.read_csv(url3)

# Remove pontos e vírgulas e converte para inteiro
dados_pop['pop'] = dados_pop['pop'].str.replace(r'[.,]', '', regex=True).astype(int)

dados_pop.head()

"""## Juntar as colunas de dados que me interessam em um dataframe só"""

#vou juntar os dataframes mortes_armas, posse_armas e dados_perigo a partir da coluna country utilizando merged
df = pd.merge(mortes_armas, dados_perigo, on='country')
df = pd.merge(df, dados_pop, on='country')
df = pd.merge(df, posse_armas, on='country')

df.head()

"""## Organizar os dados"""

# Renomear colunas para torná-las mais consistentes
df.columns = ['country', 'total_deaths', 'violent_deaths', 'violent_deaths_per_100k', 'gpi_2023', 'gpi_2022', 'gpi_2021', 'pop', 'civilian_firearms', 'civilian_firearms_per_100']

# Tratar valores ausentes
# Preencher valores ausentes com 0 para colunas numéricas
df['total_deaths'].fillna(0, inplace=True)
df['violent_deaths'].fillna(0, inplace=True)
df['violent_deaths_per_100k'].fillna(0, inplace=True)
df['civilian_firearms'].fillna(0, inplace=True)
df['civilian_firearms_per_100'].fillna(0, inplace=True)
df['pop'].fillna(0, inplace=True)
df['gpi_2023'].fillna(0, inplace=True)
df['gpi_2022'].fillna(0, inplace=True)
df['gpi_2021'].fillna(0, inplace=True)

# Verificar e converter tipos de dados
df['total_deaths'] = df['total_deaths'].astype(float)
df['violent_deaths'] = df['violent_deaths'].astype(float)
df['violent_deaths_per_100k'] = df['violent_deaths_per_100k'].astype(float)
df['civilian_firearms'] = df['civilian_firearms'].astype(int)
df['civilian_firearms_per_100'] = df['civilian_firearms_per_100'].astype(float)
df['pop'] = df['pop'].astype(float)

"""## Veja um trecho de como ficou o dataframe organizado"""

df.head()

"""## Vou criar um mapa para visualizar a distribuição de mortes violentas por 100 habitantes por país."""

# Criar o mapa
fig_map0 = px.choropleth(df,
                    locations="country",
                    locationmode="country names",
                    color="violent_deaths_per_100k",
                    color_continuous_scale=['plum', "mediumpurple", "mediumblue", "navy"],
                    range_color=(0, 25),
                    title='Mortes Violentas por 100 mil Habitantes por País',
                    labels={'violent_deaths_per_100k': 'Mortes Violentas por 100 mil Habitantes'},
                    )

# Ajustar o layout
fig_map0.update_layout(
    title_text='',
    geo=dict(
        showframe=False,
        showcoastlines=False,
        projection_type='equirectangular'
    ),
    # Configurar o tamanho e a largura do gráfico
    width=1000,  # Largura em pixels
    height=600   # Altura em pixels
)

# Mostrar o gráfico
fig_map0.show()

# Criar o heatmap
fig_map1 = px.choropleth(df,
                    locations="country",
                    locationmode="country names",
                    color="civilian_firearms_per_100",
                    color_continuous_scale= ['lightsalmon', 'red', 'firebrick'],
                    range_color=(0, 1200),
                    title='Armas nas mãos de civis por 100 mil habitantes por país')

# Ajustar o layout
fig_map1.update_layout(
    title_text='',
    geo=dict(
        showframe=False,
        showcoastlines=False,
        projection_type='equirectangular'
    ),
    # Configurar o tamanho e a largura do gráfico
    width=1000,  # Largura em pixels
    height=600   # Altura em pixels
)

# Mostrar o gráfico
fig_map1.show()

"""### Veja um pairplot para visualizar as possíveis correlações existentes entre as variáveis"""

#vou criar um pairplot com uma linh de cor laranja para ver a relação entre as variáveis
sns.pairplot(df, kind='reg', plot_kws={'line_kws':{'color':'orange'}})
plt.show()

"""### Veja que não há nada muito evidente olhando de primeira. Nenhuma relação positiva e nem negativa muito clara constante e óbvia.

## Estudo da correlação


---

### Correlação entre as diferentes colunas de dados do dataframe:
"""

# Filtrar apenas as colunas numéricas
numeric_df = df.select_dtypes(include='number')

# vejamos a correlação entre as colunas
correlation_matrix = numeric_df.corr()

"""### Vou ver isso em um gráfico heatmap da correlação:"""

# Configurar o tamanho da figura
plt.figure(figsize=(10, 8))

# Criar o heatmap
sns.heatmap(correlation_matrix, annot=True, cmap='BuPu', fmt='.2f', linewidths=0.5)

# Configurar título e rótulos
plt.title('Matriz de Correlação')
plt.show()

"""### A matriz de correlação mostra a relação entre diferentes variáveis numéricas. Os valores variam de -1 a 1, onde valores próximos de 1 indicam uma correlação positiva forte, valores próximos de -1 indicam uma correlação negativa forte, e valores próximos de 0 indicam pouca ou nenhuma correlação.

#### -  total_deaths e violent_deaths: Essa é a correlação mais óbvia. Têm uma correlação muito alta (0,94), sugerindo que onde há mais mortes totais, há também mais mortes violentas.

#### -   total_deaths e civilian_firearms: têm uma correlação positiva moderada (0,59), indicando que, à medida que o número de armas de fogo civis aumenta, o número total de mortes também tende a aumentar.

#### -  violent_deaths_per_100k e civilian_firearms têm uma correlação quase nula (0,02), sugerindo que a posse de armas de fogo por civis não está fortemente relacionada com as mortes violentas por 100 mil habitantes.

#### Esses valores ajudam a identificar quais variáveis têm relações mais fortes entre si.

### Vou estudar a correlação individualmente agora

## Visualizando os dados individualmente:
"""

#quero visualizar a dispersão de mortes
sns.scatterplot(x='total_deaths', y='violent_deaths', data = df, color = 'orange')
plt.title('Mortes totais vs Mortes violentas')
plt.xlabel('Mortes totais')
plt.ylabel('Mortes violentas')
plt.grid(True, alpha = 0.5)
plt.show()

"""### Veja a tendência de subida das mortes violentas conforme o total de mortes se eleva. Essa é uma relação óbvia.

### Veja esse outro gráfico que interessante:
"""

# Configurar o estilo do Seaborn
sns.set_style("whitegrid")

# Criar o gráfico de dispersão
plt.figure(figsize=(9, 5))
scatter = sns.scatterplot(
    data=df,
    x='total_deaths',
    y='violent_deaths',
    size='pop',  # Tamanho dos pontos baseado na população
    sizes=(20, 2000),  # Range de tamanhos dos pontos
    hue='gpi_2023',  # Cor baseada no GPI 2023
    palette='YlOrBr',  # Paleta de cores
    alpha=0.7,  # Transparência dos pontos
    legend=False  # Remove a legenda
)

# Adicionar rótulos e título
plt.title('Mortes totais vs Mortes violentas', fontsize=16)
plt.xlabel('Mortes totais', fontsize=12)
plt.ylabel('Mortes violentas', fontsize=12)

# Adicionar uma linha de regressão
sns.regplot(
    data=df,
    x='total_deaths',
    y='violent_deaths',
    scatter=False,
    color='red',
    line_kws={'linestyle': '--'}
)

# Adicionar rótulos para alguns países (por exemplo, os 5 com mais mortes totais)
top_5 = df.nlargest(5, 'total_deaths')
for idx, row in top_5.iterrows():
    plt.annotate(
        row['country'],
        (row['total_deaths'], row['violent_deaths']),
        xytext=(5, 5),
        textcoords='offset points',
        fontsize=8,
        alpha=0.8
    )

# Adicionar uma nota explicativa
plt.text(0.05, 0.95, 'Tamanho dos pontos: População\nCor dos pontos: GPI 2023',
         transform=plt.gca().transAxes, fontsize=10, verticalalignment='top')

# Ajustar o layout
plt.tight_layout()

# Mostrar o gráfico
plt.show()

"""### Maior o círculo, maior é a população no país. Veja como O caso do Brasil é muito assustador. A população é grande e tudo, mas o número de mortes e de mortes violentas é muito muito elevado. Veja a China, que aquela grande bolha amarela lá embaixo e note a diferença de mortes anuais, mesmo com uma população muito maior.
### É incrível o mau desempenho do Brasil e como ele consegue ser um exemplo legítimo do que não fazer na parte de segurança.

### Visualizar a dispersão de mortes a cada 100 mil habitantes
"""

#quero visualizar a dispersão de mortes a cada 100 mil habitantes
sns.scatterplot(x='total_deaths', y='violent_deaths_per_100k', data=df, color = 'navy')
plt.title('Mortes totais vs Mortes violentas a cada 100 mil habitantes')
plt.xlabel('Mortes totais')
plt.ylabel('Mortes violentas a cada 100 mil habitantes')
plt.grid(True, alpha = 0.5)
plt.show()

"""### Finalmente um mais interessante: Mortes vs Armas por habitante (nas mãos de civis)"""

#quero visualizar o total de mortes vs. armas por habitante
sns.scatterplot(x='civilian_firearms_per_100', y='total_deaths', data=df, color = 'red')
plt.title('Total de mortes vs. Armas por habitante')
plt.xlabel('Armas por Habitante')
plt.ylabel('Total de mortes')
plt.grid(True, alpha = 0.5)
plt.show()

"""## Existe um país em que as armas por habitante é baixa (está abaixo da média mundial), mas o total de mortes é o maior da amostra. Adivinhe que país é esse?

## Vamos ver qual é:
"""

#vou escrever o país com mais mortes totais
df.loc[df['total_deaths'].idxmax()]

"""### Sempre ele: Brasil!

## Rápida comparação: Brasil vs EUA
"""

#vou escrever as armas dividido por habitantes do Brasil
df.loc[df['country'] == 'Brazil']

"""### Vamos comparar isso com os EUA que têm uma quantidade de armas nas mãos de civis enorme:"""

#vou escrever os dados dos eua
df.loc[df['country'] == 'United States']

"""### Veja uma rápida comparação entre esses dois países:

### Diferença percentual de armas de fogo nas mãos de civis (por habitante) entre EUA e Brasil
"""

# Filtrar o número de armas por habitante para os dois países
us_firearms = df.loc[df['country'] == 'United States', 'civilian_firearms'].values[0]
brazil_firearms = df.loc[df['country'] == 'Brazil', 'civilian_firearms'].values[0]

# Calcular a diferença percentual
percentual_diff = ((us_firearms - brazil_firearms) /us_firearms) * 100

# Exibir o resultado
print(f"A diferença percentual de armas por habitante entre os Estados Unidos e o Brasil é de {percentual_diff:.2f}%.")

"""### Ou seja, o total de armas nas mãos de civis (por habitante) é 95% menor

### Diferença percentual do total de mortos entre EUA e Brasil:
"""

#filtrar o número de mortes dos dois países
us_deaths = df.loc[df['country'] == 'United States', 'total_deaths'].values[0]
brazil_deaths = df.loc[df['country'] == 'Brazil', 'total_deaths'].values[0]

#calcular a diferença percentual
percentual_diff = ((us_deaths - brazil_deaths) / us_deaths) * 100
print(f"A diferença percentual de mortes entre os Estados Unidos e o Brasil é de {percentual_diff:.2f}%.")

"""### O total de mortes no EUA é 33% menor, mesmo com eles tendo uma população de 100 mi a mais.

### Diferença percentual do total de mortes violentas (por 100 mil habitantes) entre EUA e Brasil:
"""

#calcula a diferença percentual de mortes por 100k habitantes
us_deaths_100k = df.loc[df['country'] == 'United States', 'violent_deaths_per_100k'].values[0]
brazil_deaths_100k = df.loc[df['country'] == 'Brazil', 'violent_deaths_per_100k'].values[0]

#calcular a diferença percentual
percentual_diff = ((us_deaths_100k - brazil_deaths_100k) / us_deaths_100k) * 100
print(f"A diferença percentual de mortes por 100k habitantes entre os Estados Unidos e o Brasil é de {percentual_diff:.2f}%.")

"""### Esse dado é ainda mais assustador. As mortes a cada 100 mil habitantes são 453% (quase 5 vezes) maior no Brasil em relação aos EUA.

### Ou seja, há muito mais armas nas mãos da população estadunidense e mesmo assim as mortes violentas são muito menores.

### Ou seja, não necessariamente uma coisa está relacionada a outra. Existem diversos outros fatores por trás disso.

### **Conclusão temporária:**
---


#### Não é possível afirmar que mais armas gerarão mais mortes em um país, com base em dados. Porém, observa-se que existe sim uma correlação positiva moderada entre as duas variáveis indicando que maior acesso a armas implica aumento de mortes totais em um país (e consequentemente de mortes violentas). No caso do Brasil, que a violência é inacreditável, certamente ocorreria um aumento das mortes, caso a quantidade de armas po civis aumentasse.

#### Essa é a tese inicial aqui.

---



---

## **Modelagem de Machine Learning: Clusterização utilizando o modelo Knn**

### **Explicando o que será feito:**
### Esse modelo é ótimo para perceber semelhança entre variáveis. A ideia aqui é que a partir desse treino o modelo knn perceba as semelhanças entre os diferentes países dessa amostra e então os dividiremos em grupos a partir disso com base na população, nas mortes violentas e com base também na questão de armas de fogo na mão de civis.

### Vou montar vários agrupamentos de países a partir de algumas características semelhantes entre eles. Vou agrupar por População, Mortes a cada 100 mil habitantes e Armas de fogo em posse de civis (por habitante).

### Outras bibliotecas que vou utilizar agora:
"""

from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from mpl_toolkits.mplot3d import Axes3D
from math import sqrt

"""### Pré-processamento de dados:"""

# Preparar os dados
features = ['pop', 'violent_deaths_per_100k', 'civilian_firearms_per_100']
X = df[features].values

# Normalizar os dados
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

"""### Encontrar o número ideal de clusters com base nessas características:"""

# Encontrar o número ideal de clusters
wcss = []
for i in range(1, 21):
    kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10, random_state=0)
    kmeans.fit(X_scaled)
    wcss.append(kmeans.inertia_)

def optimal_number_of_clusters(wcss):
    x1, y1 = 2, wcss[0]
    x2, y2 = 20, wcss[len(wcss)-1]
    distances = []
    for i in range(len(wcss)):
        x0 = i+2
        y0 = wcss[i]
        numerator = abs((y2-y1)*x0 - (x2-x1)*y0 + x2*y1 - y2*x1)
        denominator = sqrt((y2 - y1)**2 + (x2 - x1)**2)
        distances.append(numerator/denominator)

    return distances.index(max(distances)) + 2

optimal_k = optimal_number_of_clusters(wcss)
print(f"Número ideal de clusters: {optimal_k}")

"""### Teremos, portanto, 6 grupos de países!

### Treinar o modelo para finalmente agrupar:
"""

# Treinar o modelo KMeans com o número ideal de clusters
kmeans = KMeans(n_clusters=optimal_k, init='k-means++', max_iter=300, n_init=10, random_state=0)
cluster_labels = kmeans.fit_predict(X_scaled)

# Adicionar as labels de cluster ao DataFrame original
df['Cluster'] = cluster_labels

"""### Treinamos!

### Visualizar isso em 3d:
"""

# Visualizar os resultados em um gráfico 3D
fig = plt.figure(figsize=(9, 5))
ax = fig.add_subplot(111, projection='3d')

scatter = ax.scatter(X_scaled[:, 0], X_scaled[:, 1], X_scaled[:, 2],
                     c=cluster_labels, cmap='plasma')

ax.set_xlabel('População ')
ax.set_ylabel('Mortes violentas por 100k ')
ax.set_zlabel('Armas de fogo civis por 100 ')
ax.set_title(f'Agrupamento de países semelhantes')

plt.colorbar(scatter, label='Cluster')

# Adicionar rótulos para alguns países (por exemplo, os 5 com maior população)
top_5 = df.nlargest(5, 'pop')
for idx, row in top_5.iterrows():
    ax.text(X_scaled[idx, 0], X_scaled[idx, 1], X_scaled[idx, 2], row['country'], fontsize=8)

plt.tight_layout()
plt.show()

"""### O gráfico abaixo será interativo. Sim, você vai pode mexer nele de um lado para o outro."""

# Criar o gráfico 3D
fig = go.Figure()

# Adicionar o gráfico de dispersão 3D com cores baseadas nos clusters
fig.add_trace(go.Scatter3d(
    x=X_scaled[:, 0],
    y=X_scaled[:, 1],
    z=X_scaled[:, 2],
    mode='markers',
    marker=dict(
        size=5,
        color=cluster_labels,  # Cores baseadas nos clusters
        colorscale='Plasma',  # Escolhe o cmap 'plasma'
        colorbar=dict(title='Cluster')
    ),
    text=df['country'],  # Adicionar os nomes dos países como texto ao passar o mouse
))

# Configurar os eixos e o título
fig.update_layout(
    scene=dict(
        xaxis_title='População',
        yaxis_title='Mortes violentas por 100k',
        zaxis_title='Armas de fogo civis por 100',
    ),
    title='Agrupamento de países semelhantes',
    width=900,
    height=600
)

# Adicionar rótulos para os 5 países com maior população
top_5 = df.nlargest(5, 'pop')
for idx, row in top_5.iterrows():
    fig.add_trace(go.Scatter3d(
        x=[X_scaled[idx, 0]],
        y=[X_scaled[idx, 1]],
        z=[X_scaled[idx, 2]],
        mode='text',
        text=[row['country']],
        textposition='top right',
        showlegend=False
    ))

# Mostrar o gráfico interativo
fig.show()

"""### Vejamos com mais detalhes cada cluster:"""

# Criar um DataFrame para cada cluster
cluster_dfs = {}
for i in range(optimal_k):
    cluster_dfs[i] = df[df['Cluster'] == i].copy()
    print(f"\nCluster {i}:")
    print(f"Número de países: {len(cluster_dfs[i])}")
    #quero apenas as colunas 'pop', 'violent_deaths_per_100k', 'civilian_firearms_per_100' em cada cluster
    cluster_dfs[i] = cluster_dfs[i][['country', 'pop', 'violent_deaths_per_100k', 'civilian_firearms_per_100']]

"""### Visualizar as 5 primeiras linhas de dados de cada cluster:"""

#vou escrever as 5 primeiras linhas de cada cluster
for i, cluster_df in cluster_dfs.items():
    print(f"\nCluster {i}:")
    print(cluster_df.head())

"""### Visualizando os dados em 2d, agora:"""

# Configurar o estilo do gráfico
plt.figure(figsize=(9, 5))
sns.set_style("whitegrid")

# Criar o gráfico de dispersão
for i, cluster_df in cluster_dfs.items():
    sns.scatterplot(
        data=cluster_df,
        x='civilian_firearms_per_100',
        y='violent_deaths_per_100k',
        label=f'Cluster {i}',
        s=100  # Tamanho dos pontos
    )

# Adicionar rótulos para alguns países em cada cluster
for i, cluster_df in cluster_dfs.items():
    # Selecionar os 3 países com maior população em cada cluster
    top_3 = cluster_df.nlargest(3, 'pop')
    for idx, row in top_3.iterrows():
        plt.annotate(
            row['country'],
            (row['civilian_firearms_per_100'], row['violent_deaths_per_100k']),
            xytext=(5, 5),
            textcoords='offset points',
            fontsize=8,
            alpha=0.8
        )

# Configurar os rótulos e o título
plt.xlabel('Armas de fogo civis por 100 habitantes')
plt.ylabel('Mortes violentas por 100k habitantes')
plt.title('Relação entre posse de armas e mortes violentas por cluster')

# Ajustar a legenda
plt.legend(title='Clusters')

# Ajustar os limites dos eixos para melhor visualização
plt.xlim(-2, 1300)
plt.ylim(-2, 45)

# Mostrar o gráfico
plt.tight_layout()
plt.show()

"""### estudando as estatísticas descritivas de cada cluster:"""

# Imprimir estatísticas resumidas para cada cluster
for i, cluster_df in cluster_dfs.items():
    print(f"\nEstatísticas do Cluster {i}:")
    print(cluster_df[['violent_deaths_per_100k', 'civilian_firearms_per_100', 'pop']].describe())
    print("\nPaíses no cluster:")
    print(", ".join(cluster_df['country'].tolist()))

"""### Procurando o Brasil:"""

#vou escrever os dados do cluster 4
cluster_dfs[4]

"""### Com base nesse modelo treinado, o Brasil possui semelhanças, no que se refere à questão, a países como Colômbia, El Salvador, Guatemala, Honduras e Vezenuela. Todos esses países passaram (a maioria ainda passa, com excessão de El Salvador que melhorou no quesito) por crises de segurança pública muito profundas.

### Vamos visualizar os dados para essa cluster 4:
"""

cluster_df4 = cluster_dfs[4]

"""### Gráfico interativo:"""

# Criar o gráfico de dispersão
fig = px.scatter(
    cluster_df4,
    x='civilian_firearms_per_100',
    y='pop',
    size='violent_deaths_per_100k',  # Tamanho das bolas baseado em 'violent_deaths_per_100k'
    color='country',  # Cor baseada no país
    hover_name='country',  # Nome do país ao passar o mouse
    labels={
        'pop': 'População',
        'civilian_firearms_per_100': 'Armas de fogo civis por 100 pessoas',
        'violent_deaths_per_100k': 'Mortes violentas por 100k pessoas'
    },
    title='Relação entre população, armas de fogo e mortes violentas (Cluster 4)'
)

# Ajustar o layout e tamanho do gráfico
fig.update_layout(
    width=1000,  # Largura em pixels
    height=600,  # Altura em pixels
    title={
        'y':0.95,  # Posição vertical do título
        'x':0.5,   # Posição horizontal do título
        'xanchor': 'center',  # Alinhamento horizontal do título
        'yanchor': 'top'  # Alinhamento vertical do título
    },
    xaxis_title="Armas de fogo civis por 100 pessoas",
    yaxis_title="População",
    legend_title="País",
    font=dict(
        family="Arial, sans-serif",
        size=12,
        color="black"
    )
)

# Mostrar o gráfico
fig.show()

"""### Gráfico de bolhas dos países da cluster 4:"""

# Selecionar o DataFrame do cluster desejado
cluster_df = cluster_dfs[4]  # Aqui você pode mudar para o cluster que quiser

# Criar o gráfico de bolhas
plt.figure(figsize=(10, 6))
scatter = plt.scatter(
    cluster_df['pop'],  # Eixo X: população
    cluster_df['civilian_firearms_per_100'],  # Eixo Y: armas de fogo civis por 100 habitantes
    s=cluster_df['violent_deaths_per_100k'] * 100,  # Tamanho das bolas (ajustado para melhor visualização)
    c=range(len(cluster_df)),  # Cor das bolas com base no índice do DataFrame
    cmap='viridis',  # Paleta de cores
    alpha=0.7,  # Transparência das bolhas
    edgecolor='w'  # Cor da borda das bolhas
)

# Adicionar rótulos aos eixos
plt.xlabel('População (em centenas de milhões)')
plt.ylabel('Armas de fogo civis por 100 pessoas')
plt.title('Relação entre população, armas de fogo e mortes violentas (Cluster 4)')

# Adicionar legenda do tamanho das bolhas
bubble_sizes = [10, 20, 30]  # Exemplos de tamanhos de bolhas para legenda
for size in bubble_sizes:
    plt.scatter([], [], s=size * 100, c='gray', label=f'{size} mortes violentas por 100k')


# Adicionar rótulos dos países
for idx, row in cluster_df.iterrows():
    plt.text(row['pop'], row['civilian_firearms_per_100'], row['country'], fontsize=8)

# Mostrar o gráfico
plt.tight_layout()
plt.show()

"""### Maior a bolha maior a violência por habitante.

### Vamos comparar isso a cluster 1. Essa cluster tem população de nível médio e mortes violentas em níveis moderados também.
"""

cluster_dfs[1]

cluster_df1 = cluster_dfs[1]

# Criar o gráfico de dispersão
fig = px.scatter(
    cluster_df1,
    x='pop',
    y='civilian_firearms_per_100',
    size='violent_deaths_per_100k',  # Tamanho das bolas baseado em 'violent_deaths_per_100k'
    color='country',  # Cor baseada no país
    hover_name='country',  # Nome do país ao passar o mouse
    labels={
        'pop': 'População',
        'civilian_firearms_per_100': 'Armas de fogo civis por 100 pessoas',
        'violent_deaths_per_100k': 'Mortes violentas por 100k pessoas'
    },
    title='Relação entre população, armas de fogo e mortes violentas (Cluster 1)'
)

# Ajustar o layout e tamanho do gráfico
fig.update_layout(
    width=1000,  # Largura em pixels
    height=600,  # Altura em pixels
    title={
        'y':0.95,  # Posição vertical do título
        'x':0.5,   # Posição horizontal do título
        'xanchor': 'center',  # Alinhamento horizontal do título
        'yanchor': 'top'  # Alinhamento vertical do título
    },
    xaxis_title="Armas de fogo civis por 100 pessoas",
    yaxis_title="População",
    legend_title="País",
    font=dict(
        family="Arial, sans-serif",
        size=12,
        color="black"
    )
)

# Mostrar o gráfico
fig.show()

"""### Visualizar os dados da cluster 1 em um gráfico de bolhas:"""

# Selecionar o DataFrame do cluster desejado
cluster_df = cluster_dfs[1]  # Aqui você pode mudar para o cluster que quiser

# Criar o gráfico de bolhas
plt.figure(figsize=(10, 6))
scatter = plt.scatter(
    cluster_df['pop'],  # Eixo X: população
    cluster_df['civilian_firearms_per_100'],  # Eixo Y: armas de fogo civis por 100 habitantes
    s=cluster_df['violent_deaths_per_100k'] * 100,  # Tamanho das bolas (ajustado para melhor visualização)
    c=range(len(cluster_df)),  # Cor das bolas com base no índice do DataFrame
    cmap='viridis',  # Paleta de cores
    alpha=0.7,  # Transparência das bolhas
    edgecolor='w'  # Cor da borda das bolhas
)

# Adicionar rótulos aos eixos
plt.xlabel('População (em centenas de milhões)')
plt.ylabel('Armas de fogo civis por 100 pessoas')
plt.title('Relação entre população, armas de fogo e mortes violentas (Cluster 1)')

# Adicionar legenda do tamanho das bolhas
bubble_sizes = [10, 20, 30]  # Exemplos de tamanhos de bolhas para legenda
for size in bubble_sizes:
    plt.scatter([], [], s=size * 100, c='gray', label=f'{size} mortes violentas por 100k')


# Mostrar o gráfico
plt.tight_layout()
plt.show()

"""### Ficou muito bonito esse gráfico!

### Nele vemos como essa agrupamento é grande e diverso. As bolhas de violência são ligeiramente menores que no caso do agrupamento (cluster) 4. A posse de armas nas mãos de civis também é baixa.

### A situação da criminalidade dos países dessa cluster são mais controlados que a da nossa cluster 4. Seria ótimo podermos mais para frente estudarmos as características institucionais, jurídicas e o contexto econômico desses países de forma a procurar algum padrão. Isso, porém, é trabalho para outro dia.

### Essa parte 1 está finalizada.
"""