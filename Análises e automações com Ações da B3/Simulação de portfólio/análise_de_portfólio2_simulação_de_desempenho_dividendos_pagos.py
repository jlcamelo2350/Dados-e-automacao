# -*- coding: utf-8 -*-
"""Análise de portfólio2 - Simulação de desempenho Dividendos pagos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JeXVJ9KRtsUrgMCrlmTEjsWn1Hoop3Hi

### Considerando os dividendos pagos, obtemos o seguinte retornos por portfólio:
#### Portfólio Conservador: R$561.90, ou seja, retorno de mais de 50%

####Portfólio Equilibrado: R$606.41, retorno de por volta de 60%

#### Portfólio Arrojado: R$2959.05, retorno de quase 300%!. Esse portfólio aqui ficou bastante equilibrado até dado a escolha de colocar empresas como Petrobrás e WEG nele para dar uma equilibrada.

### Lembre-se também que esse valor inflacionado do portfólio arrojado se deve também ao bom desempenho da ação da PetroRio e do contexto descrito nos trabalhos anteriores

---

## Vamos ao código:
"""

import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import datetime as dt

"""## Defino os portfólios"""

# Lista de tickers das empresas

#Portfólio conservador:
tickers_c = [
    'ITUB4.SA',  # Itaú Unibanco
    'ABEV3.SA',  # Ambev
    'VALE3.SA',  # Vale
    'WEGE3.SA',  # Weg
    'BRFS3.SA',  # BRF
    'BBSE3.SA',  # Banco do Brasil Seguros
    'VBBR3.SA',  #Vibra Energia
    'UGPA3.SA'  # Ultrapar
             ]

#Portfólio Equilibrado:
tickers_e = [
    'BBAS3.SA',  # Banco do Brasil
    'ITUB4.SA',  # Itaú Unibanco
    'PETR4.SA',  # Petrobras
    'ITSA4.SA',  # Itaúsa
    'RENT3.SA',  # Localiza
    'EMBR3.SA', # Embraer
    'CIEL3.SA',  # Cielo
    'SUZB3.SA',  # Suzano
    'JBSS3.SA'  #JBS
              ]

#Portfólio mais Arrojado:
tickers_a = [
    'COGN3.SA',  # Cogna
    'CYRE3.SA',  # Cyrela
    'FLRY3.SA',  # Fleury
    'PRIO3.SA',  # PetroRio
    'BRKM5.SA',   # Braskem
    'LREN3.SA',  # Lojas Renner
    'RAIL3.SA',  # Rumo SA
    'PETR4.SA',  # Petrobras
    'WEGE3.SA',  # Weg
    ]

"""## Função para baixar os preços das ações das empresas:"""

# Definir o intervalo de datas: de 08/08/2018 até 12/06/2024.
start = dt.datetime(2018, 8, 8)
end = dt.datetime(2024, 6, 12 )

def dados_preços(tickers):
    df = pd.DataFrame()
    for ticker in tickers:
        try:
            data = yf.download(ticker, start=start, end=end)['Close']
            df[ticker.split('.')[0]] = data
        except Exception as e:
            print(f"Erro ao baixar dados para {ticker}: {e}")
    df.reset_index(inplace=True)
    return df

df_conservador = dados_preços(tickers_c)
df_equilibrado = dados_preços(tickers_e)
df_arrojado = dados_preços(tickers_a)

"""## Função para baixar os dividendos:"""

# Função para baixar e somar os dividendos
def dados_dividendos(tickers):
    dividendos = pd.DataFrame()
    for ticker in tickers:
        try:
            empresa = yf.Ticker(ticker)
            dados_div = empresa.dividends.reset_index()
            dados_div['Ticker'] = ticker
            dados_div['Date'] = dados_div['Date'].dt.tz_localize(None)
            dividendos = pd.concat([dividendos, dados_div], ignore_index=True)
        except Exception as e:
            print(f"Erro ao baixar dados para {ticker}: {e}")

    # Calcular a soma dos dividendos por empresa
    soma_dividendos = dividendos.groupby('Ticker')['Dividends'].sum().reset_index()
    return soma_dividendos

"""## Armazeno os dados portfólio por portfólio:"""

div_c = dados_dividendos(tickers_c)
div_e = dados_dividendos(tickers_e)
div_a = dados_dividendos(tickers_a)

"""## Visualizo os dados de dividendos pagos:"""

# Configurações do gráfico
plt.figure(figsize=(10, 5))
plt.title('Valores dos Dividendos Pagos por Empresa do portfólio conservador')
plt.xlabel('Empresa')
plt.ylabel('Valor dos Dividendos')

# Plotar os valores dos dividendos para cada portfólio
plt.bar(div_c['Ticker'], div_c['Dividends'], color='navy', alpha=0.7, label='Conservador')

# Adicionar legenda e mostrar o gráfico
plt.legend()
plt.grid(True, alpha = 0.1, color = 'black', linestyle ='--')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Configurações do gráfico
plt.figure(figsize=(10, 5))
plt.title('Valores dos Dividendos Pagos por Empresa')
plt.xlabel('Empresa')
plt.ylabel('Valor dos Dividendos')
plt.bar(div_e['Ticker'], div_e['Dividends'], color='purple', alpha=0.7, label='Equilibrado')
plt.legend()
plt.grid(True, alpha = 0.1, color = 'black', linestyle ='--')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Configurações do gráfico
plt.figure(figsize=(10, 5))
plt.title('Valores dos Dividendos Pagos por Empresa')
plt.xlabel('Empresa')
plt.ylabel('Valor dos Dividendos')
plt.bar(div_a['Ticker'], div_a['Dividends'], color='green', alpha=0.7, label='Arrojado')
plt.legend()
plt.grid(True, alpha = 0.1, color = 'black', linestyle ='--')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""## Exibir isso na forma de tabela:"""

# Exibir a soma dos dividendos
print('Somatório dos dividendos pagos do portfólio conservador:')
print(div_c)
print()
print('Somatório dos dividendos pagos do portfólio equilibrado:')
print(div_e)
print()
'Somatório dos dividendos pagos do portfólio arrojado:'
print(div_a)

"""## Vou criar uma função para claular o retorno geral. Retorno geral = Dividendos pagos + Valorização do preço da ação"""

def calcular_retorno_total(df, dividendos, investimento_inicial=1000):
    retorno_total = 0
    for ticker in df.columns[1:]:
        preco_compra = df[ticker].iloc[0]  # Preço de compra da ação
        preco_atual = df[ticker].iloc[-1]  # Preço atual da ação
        alocacao = investimento_inicial / len(df.columns[1:])  # Alocação inicial para cada ação
        if preco_compra == 0:
            print(f"Preço de compra igual a zero para {ticker}. Ignorando ação.")
            continue
        acoes_compradas = alocacao / preco_compra  # Número de ações compradas
        retorno_acao = (preco_atual - preco_compra) * acoes_compradas + dividendos[dividendos['Ticker'] == ticker]['Dividends'].sum()
        retorno_total += retorno_acao
    return retorno_total

"""## Armazeno os retornos portfólio por portfólio:"""

retorno_total_conservador = calcular_retorno_total(df_conservador, div_c)
retorno_total_equilibrado = calcular_retorno_total(df_equilibrado, div_e)
retorno_total_arrojado = calcular_retorno_total(df_arrojado, div_a)

print(f"Retorno Total do Portfólio Conservador: R${retorno_total_conservador:.2f}")
print(f"Retorno Total do Portfólio Equilibrado: R${retorno_total_equilibrado:.2f}")
print(f"Retorno Total do Portfólio Arrojado: R${retorno_total_arrojado:.2f}")

"""## Veja que todos tiveram retornos positivos.

---

## Agora vou simular o investimento de R$1000 em cada portfólio:

### Portfólio Conservador:
"""

investimento_inicial = 1000
retorno_total = 0

# Calcular o retorno total do portfólio para o portfólio conservador
for ticker in df_conservador.columns[1:]:
    preco_compra = df_conservador[ticker].iloc[0]  # Preço de compra da ação
    print(f"Preço de compra para {ticker}: {preco_compra}")

    preco_atual = df_conservador[ticker].iloc[-1]  # Preço atual da ação
    print(f"Preço atual para {ticker}: {preco_atual}")

    alocacao = investimento_inicial / len(df_conservador.columns[1:])  # Alocação inicial para cada ação
    print(f"Alocação para {ticker}: {alocacao}")

    if preco_compra == 0:
        print(f"Preço de compra igual a zero para {ticker}. Ignorando ação.")
        continue
    acoes_compradas = alocacao / preco_compra  # Número de ações compradas
    print(f"Número de ações compradas para {ticker}: {acoes_compradas}")

    retorno_acao = (preco_atual - preco_compra) * acoes_compradas + div_c.loc[div_c['Ticker'] == ticker]['Dividends'].sum()
    retorno_total += retorno_acao

    print(f"Retorno da ação {ticker}: R${retorno_acao:.2f}")
    print()

print(f"Retorno Total do Portfólio Conservador: R${retorno_total:.2f}")

"""### Portfólio Moderado:"""

investimento_inicial = 1000
retorno_total = 0

# Calcular o retorno total do portfólio para cada portfólio
for ticker in df_equilibrado.columns[1:]:
    preco_compra = df_equilibrado[ticker].iloc[0]  # Preço de compra da ação
    print(f"Preço de compra para {ticker}: {preco_compra}")

    preco_atual = df_equilibrado[ticker].iloc[-1]  # Preço atual da ação
    print(f"Preço atual para {ticker}: {preco_atual}")

    alocacao = investimento_inicial / len(df_equilibrado.columns[1:])  # Alocação inicial para cada ação
    print(f"Alocação para {ticker}: {alocacao}")

    if preco_compra == 0:
        print(f"Preço de compra igual a zero para {ticker}. Ignorando ação.")
        continue
    acoes_compradas = alocacao / preco_compra  # Número de ações compradas
    print(f"Número de ações compradas para {ticker}: {acoes_compradas}")

    retorno_acao = (preco_atual - preco_compra) * acoes_compradas + div_e.loc[div_e['Ticker'] == ticker]['Dividends'].sum()
    retorno_total += retorno_acao

    print(f"Retorno da ação {ticker}: R${retorno_acao:.2f}")
    print()

print(f"Retorno Total do Portfólio Equilibrado: R${retorno_total:.2f}")

"""### Portfólio Arrojado:"""

investimento_inicial = 1000
retorno_total = 0

# Calcular o retorno total do portfólio para cada portfólio
for ticker in df_arrojado.columns[1:]:
    preco_compra = df_arrojado[ticker].iloc[0]  # Preço de compra da ação
    print(f"Preço de compra para {ticker}: {preco_compra}")

    preco_atual = df_arrojado[ticker].iloc[-1]  # Preço atual da ação
    print(f"Preço atual para {ticker}: {preco_atual}")

    alocacao = investimento_inicial / len(df_arrojado.columns[1:])  # Alocação inicial para cada ação
    print(f"Alocação para {ticker}: {alocacao}")

    if preco_compra == 0:
        print(f"Preço de compra igual a zero para {ticker}. Ignorando ação.")
        continue
    acoes_compradas = alocacao / preco_compra  # Número de ações compradas
    print(f"Número de ações compradas para {ticker}: {acoes_compradas}")

    retorno_acao = (preco_atual - preco_compra) * acoes_compradas + div_a.loc[div_a['Ticker'] == ticker]['Dividends'].sum()
    retorno_total += retorno_acao

    print(f"Retorno da ação {ticker}: R${retorno_acao:.2f}")
    print()

print(f"Retorno Total do Portfólio Arrojado: R${retorno_total:.2f}")

"""## Vou criar o portfólio ideal do período com as empresas que mais deram retorno:"""

#vou pegar as empresas que mais deram retorno e escrever seus dados